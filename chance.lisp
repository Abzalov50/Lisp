(defvar *alphanum*
  '((#\a . 1)
    (#\b . 2)
    (#\c . 3)
    (#\d . 4)
    (#\e . 5)
    (#\f . 6)
    (#\g . 7)
    (#\h . 8)
    (#\i . 9)
    (#\j . 10)
    (#\k . 11)
    (#\l . 12)
    (#\m . 13)
    (#\n . 14)
    (#\o . 15)
    (#\p . 16)
    (#\q . 17)
    (#\r . 18)
    (#\s . 19)
    (#\t . 20)
    (#\u . 21)
    (#\v . 22)
    (#\w . 23)
    (#\x . 24)
    (#\y . 25)
    (#\z . 26)
    (#\  . 0)
    (#\' . 0)))

(defvar *fatime-hand*
  '((#\a . 1)
    (#\b . 2)
    (#\c . 3)
    (#\d . 4)
    (#\e . 5)
    (#\f . 6)
    (#\g . 7)
    (#\h . 8)
    (#\i . 9)
    (#\k . 10)
    (#\l . 20)
    (#\m . 30)
    (#\n . 40)
    (#\o . 50)
    (#\p . 60)
    (#\q . 70)
    (#\r . 80)
    (#\s . 90)
    (#\t . 100)
    (#\u . 200)
    (#\x . 300)
    (#\y . 400)
    (#\z . 500)
    (#\j . 600)
    (#\v . 700)
    (#\  . 0)
    (#\' . 0)))

(defun get-alpha-number (c alphabet)
  (cdr (assoc c alphabet)))

(defun sum-alpha-num (name alphabet)
	   (reduce #'+ (mapcar #'(lambda (c)
				   (get-alpha-number c alphabet))
			       (coerce name 'list))))

(defun kbl-number (sum-name)
	   (mod sum-name 9))
